drop table IF EXISTS friends, film_genre, likes, users, films, mpa, genres,
directors, film_director, reviews, review_likes, events CASCADE;

create TABLE users
(
    user_id  INT4         generated by default as identity primary key,
    email    VARCHAR(100) NOT NULL
        CONSTRAINT "email_unique" UNIQUE,
    login    VARCHAR(100) NOT NULL
        CONSTRAINT "login_unique" UNIQUE,
    name     VARCHAR(100) NOT NULL,
    birthday DATE         NOT NULL
);

create TABLE friends
(
    user_id   INT4        NOT NULL,
    friend_id INT4        NOT NULL,
    CONSTRAINT user_friend_pkey
        PRIMARY KEY (user_id, friend_id),
    CONSTRAINT user_friends_fkey
        FOREIGN KEY (user_id)
            REFERENCES users (user_id)
            ON delete CASCADE,
    CONSTRAINT friend_friends_fkey
        FOREIGN KEY (friend_id)
            REFERENCES users (user_id)
            ON delete CASCADE,
    CONSTRAINT user_not_equals_friend CHECK ( user_id <> friend_id )
);

create TABLE mpa
(
    mpa_id          INT4         generated by default as identity primary key,
    mpa_name        VARCHAR(20)  NOT NULL,
    mpa_description VARCHAR(200) NOT NULL
);

create TABLE films
(
    film_id     INT4         generated by default as identity primary key,
    name        VARCHAR(200) NOT NULL,
    description VARCHAR(200) NOT NULL,
    release     DATE         NOT NULL,
    duration    INT2         NOT NULL,
    mpa_id      INT4         NOT NULL,
    CONSTRAINT film_mpa_fkey
        FOREIGN KEY (mpa_id)
            REFERENCES mpa (mpa_id)
            ON delete CASCADE
);

create TABLE genres
(
    genre_id    INT4         generated by default as identity primary key,
    genre_name  VARCHAR(50) NOT NULL
);

create TABLE film_genre
(
    film_id  INT4 NOT NULL,
    genre_id INT4 NOT NULL,
    CONSTRAINT film_genre_pkey
        PRIMARY KEY (film_id, genre_id),
    CONSTRAINT film_genre_fkey
        FOREIGN KEY (film_id)
            REFERENCES films (film_id)
            ON delete CASCADE,
    CONSTRAINT genre_film_fkey
        FOREIGN KEY (genre_id)
            REFERENCES genres (genre_id)
            ON delete CASCADE
);

create TABLE likes
(
    film_id INT4 NOT NULL,
    user_id INT4 NOT NULL,
    CONSTRAINT film_user_pkey
        PRIMARY KEY (film_id, user_id),
    CONSTRAINT film_user_fkey
        FOREIGN KEY (film_id)
            REFERENCES films (film_id)
            ON delete CASCADE,
    CONSTRAINT user_film_fkey
        FOREIGN KEY (user_id)
            REFERENCES users (user_id)
            ON delete CASCADE
);

create TABLE directors
(
    director_id    INT4         GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name  VARCHAR(50)  UNIQUE NOT NULL
);

create TABLE film_director
(
    film_id  INT4 NOT NULL,
    director_id INT4 NOT NULL,
    CONSTRAINT film_director_pkey
        PRIMARY KEY (film_id, director_id),
    CONSTRAINT film_director_fkey
        FOREIGN KEY (film_id)
            REFERENCES films (film_id)
            ON delete CASCADE,
    CONSTRAINT director_film_fkey
        FOREIGN KEY (director_id)
            REFERENCES directors (director_id)
              ON delete CASCADE
);

create TABLE reviews
(
    review_id       INT4  generated by default as identity primary key,
    content         VARCHAR(1000),
    is_positive     BOOL NOT NULL,
    useful          INT2,
    user_id         INT4 NOT NULL,
    film_id         INT4 NOT NULL,
    CONSTRAINT user_id_fkey
        FOREIGN KEY (user_id)
            REFERENCES users (user_id)
            ON delete CASCADE,
    CONSTRAINT film_id_fkey
        FOREIGN KEY (film_id)
            REFERENCES films (film_id)
            ON delete CASCADE
);

create TABLE review_likes
(
    review_id INT4 NOT NULL,
    user_id INT4 NOT NULL,
    rate INT2 NOT NULL,
    CONSTRAINT review_user_pkey
        PRIMARY KEY (review_id, user_id),
    CONSTRAINT review_user_fkey
        FOREIGN KEY (review_id)
            REFERENCES reviews (review_id)
            ON delete CASCADE,
    CONSTRAINT user_review_fkey
        FOREIGN KEY (user_id)
            REFERENCES users (user_id)
            ON delete CASCADE
);

create TABLE events
(
    event_id   INT4 generated by default as identity primary key,
    event_time INT8 NOT NULL,
    event_type VARCHAR(20) CHECK (event_type in ('LIKE', 'REVIEW', 'FRIEND')),
    operation  VARCHAR(20) CHECK (operation in ('REMOVE', 'ADD', 'UPDATE')),
    entity_id  INT4 NOT NULL,
    user_id    INT4 NOT NULL,
    CONSTRAINT event_user_fkey
        FOREIGN KEY (user_id)
            REFERENCES users (user_id)
            ON delete CASCADE
);